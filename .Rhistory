address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
base_uri <- "https://www.googleapis.com/civicinfo/v2/"
resource <- "representatives?"
query_params <- list(key = key_api, address = "185 E Stevens Way NE, Seattle, WA 98195")
#address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
View(response)
parsed_data <- fromJSON(response_content)
offices <- parsed_data$offices
offices <- flatten(offices)
officials <- parsed_data$officials
officials <- flatten(officials)
View(offices)
View(officials)
data.frame(officials)
officials
getwd()
library(knitr)
kable(officials)
View(offices)
View(officials)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(offices)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
for(i in 1:nrow(offices)) {
cat("Office ", i, ": ", offices$name[i], "\n")
for(j in offices$officialIndices[i]) {
## create a new merged data frame line
mergedRow <- data.frame(office = offices$name[i],
name = officials$name[j])
mergedDataFrame <- rbind(mergedDataFrame, mergedRow)
# add this merged line to the previous merged data
}
}
cat("final merged data:\n")
print(mergedDataFrame)
View(mergedRow)
View(officials)
for(i in 1:nrow(offices)) {
cat("Office ", i, ": ", offices$name[i], "\n")
for(j in offices$officialIndices[i]) {
## create a new merged data frame line
mergedRow <- data.frame(office = offices$name[i],
name = officials$name[j])
mergedDataFrame <- rbind(mergedDataFrame, mergedRow)
# add this merged line to the previous merged data
}
}
officials <- select(officials, name, party, emails, phones, urls, photoUrl)
for(i in 1:nrow(offices)) {
cat("Office ", i, ": ", offices$name[i], "\n")
for(j in offices$officialIndices[i]) {
## create a new merged data frame line
mergedRow <- data.frame(office = offices$name[i],
name = officials$name[j])
mergedDataFrame <- rbind(mergedDataFrame, mergedRow)
# add this merged line to the previous merged data
}
}
View(officials)
View(offices)
tidyr::unnest(offices, officialIndicies)
library(tidyr)
install.packages(tidyr)
install.packages("tidyr)
install.packages("tidyr")
install.packages("tidyr")
tidyr::unnest(offices, officialIndicies)
View(offices)
tidyr::unnest(offices, officialIndices)
num_to_rep <- unlist(lapply(parsed_data$offices$officialIndices, length))
expanded <- offices [rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() -1)
expanded <- expanded %>% mutate(index = row_number() -1) %>%
rename(position = name)
expanded <- mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>%
left_join(position)
View(expanded)
expanded <- mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>%
left_join(index)
num_to_rep <- unlist(lapply(parsed_data$offices$officialIndices, length))
expanded <- offices [rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() -1)
expanded <- expanded %>% mutate(index = row_number() -1) %>%
rename(position = name)
expanded <- mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>%
left_join(index)
num_to_rep <- unlist(lapply(parsed_data$offices$officialIndices, length))
expanded <- offices [rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() -1)
expanded <- expanded %>% mutate(index = row_number() -1) %>%
rename(position = name) %>%
left_join(index)
num_to_rep <- unlist(lapply(parsed_data$offices$officialIndices, length))
expanded <- offices [rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() -1)
expanded <- expanded %>% mutate(index = row_number() -1) %>%
rename(position = name) %>%
left_join(position)
officials <- officials %>% mutate(index = row_number() -1)
View(officials)
View(officials)
officials <- officials %>% mutate(index = row_number() -1) %>% left_join(position)
officials <- officials %>% mutate(officialIndices = strtoi(row.names(officials)) - 1) %>% left_join(position)
officials <- officials %>% mutate(officialIndices = strtoi(row.names(officials)) - 1) #%>% left_join(position)
View(officials)
num_to_rep <- unlist(lapply(parsed_data$offices$officialIndices, length))
expanded <- offices [rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(officialIndices = strtoi(row.names(officials)) - 1) #%>% left_join(position)
View(expanded)
View(officials)
tidyr::unnest(offices, officialIndices)
mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>% left_join(office)
mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>% left_join(office)
office <- tidyr::unnest(offices, officialIndices)
mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>% left_join(office)
data <- mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>% left_join(office)
View(data)
View(offices)
office <- tidyr::unnest(offices, officialIndices)
data <- mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>% left_join(office)
View(data)
base_uri <- "https://www.googleapis.com/civicinfo/v2/"
resource <- "representatives?"
query_params <- list(key = key_api, address = "185 E Stevens Way NE, Seattle, WA 98195")
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
offices <- parsed_data$offices
offices <- flatten(offices)
officials <- parsed_data$officials
officials <- flatten(officials)
input <- parsed_data$normalizedInput
state_input <- input$state
officials <- select(officials, name, party, emails, phones, urls, photoUrl)
office <- tidyr::unnest(offices, officialIndices)
data <- mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>% left_join(office)
View(data)
office <- tidyr::unnest(offices, officialIndices)
View(office)
office <- tidyr::unnest(offices, index)
state_input <- input$state
officials <- select(officials, name, party, emails, phones, urls, photoUrl)
office <- tidyr::unnest(offices, index)
office <- tidyr::unnest(offices, officialIndices)
View(office)
colnames(office)
colnames(office)[1] <- "office"
data <- mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>% left_join(office)
View(data)
View(data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
final_data
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
final_data <- select(data, office, name, party, emails, phones, urls, photoUrl)
View(final_data)
final_data <- select(data, office, name, party, emails, phones, photoUrl)
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
final_data[8, "Photo"]
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
final_data[8, "Photo"]
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
help("is.na()")
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
view
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
view
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
final_data[1, 6]
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
view
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
kable(final_data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
library(knitr)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
---
title: "Who are the elected representatives?"
output:
html_document: default
css: styles.css
---
This is the stub of the .rmd file you should use to create you
representatives' overview.  Please fill in the missing part, write the
code, and delete the instructions.
```{r setup, include=FALSE}
## this is the code chunk for R setup.
## You may load libraries and your google key here
## You can also set various knitr options here
library(knitr)
library(httr)
library(jsonlite)
library(stringr)
library(dplyr)
source("api_key.R")
source('process-data.R')
knitr::opts_chunk$set(echo=FALSE, message=FALSE)
```
Set the addresses in a code chunk.  These are the addresses the user
can modify
```{r}
address1 <- "puyallup, WA"
# imprecise addresses may (or may not) work
address2 <- "2199 S University Blvd, Denver, CO 80208"
# good if you have correct street address
```
# Elected officials for the first address
Write a few words and print the address in an inline code chunk
```{r}
tbl <- repTable(address1)
## You may also want to do some additional processing here
## Obviosly, you may pick different function and variable name.
## You may want to consider knitr::kable for improved table printing, look
## for details at the rmarkdown page at
## http://rmarkdown.rstudio.com/index.html
knitr::kable(tbl)
```
# Elected officials for the second address
This section should be very similar to the previous section: write a
few words and print the address in an inline code chunk
```{r}
tbl <- repTable(address2)
knit::kable(tbl)
```
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
final_data[29, 2]
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
final_data[29, 2]
colnames(final_data)[6] <- "Photo"
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
library(httr)
library(jsonlite)
library(dplyr)
library(stringr)
library(knitr)
source("api_key.R")
##API Call
repTable <- function(address1){
base_uri <- "https://www.googleapis.com/civicinfo/v2/"
resource <- "representatives?"
query_params <- list(key = key_api, address = address1)   #"185 E Stevens Way NE, Seattle, WA 98195")
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
offices <- parsed_data$offices
offices <- flatten(offices)
officials <- parsed_data$officials
officials <- flatten(officials)
input <- parsed_data$normalizedInput
state_input <- input$state
officials <- select(officials, name, party, emails, phones, urls, photoUrl)
office <- tidyr::unnest(offices, officialIndices)
colnames(office)[1] <- "office"
data <- mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>% left_join(office)
final_data <- select(data, office, name, party, emails, phones, photoUrl)
colnames(final_data)[1] <- "Position"
colnames(final_data)[2] <- "Name"
colnames(final_data)[3] <- "Party"
colnames(final_data)[4] <- "Email"
colnames(final_data)[5] <- "Phone"
colnames(final_data)[6] <- "Photo"
View(final_data)
View(final_data)
View(final_data)
View(final_data)
View(final_data)
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
View(final_data)
q()
exit
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
source('~/Documents/INFO 201/a6-apis-group_39/process-data.R')
colnames(final_data)[4] <- "Email"
colnames(final_data)[5] <- "Phone"
colnames(final_data)[6] <- "Photo"
final_data <- final_data %>% replace(.=="NULL", "-")
final_data <- final_data %>% replace(.=="NA", "-")
final_data$Party <- str_replace(final_data$Party, "NA", "-")
final_data$Name <- paste0("[", final_data$Name, "](", data$urls, ")")
final_data <- final_data %>% replace(.=="![Pat McCarthy](NULL)", "Pat McCarthy")
final_data$Email <- str_replace(final_data$Email, "NULL", "-")
final_data$Photo <- paste0("![alt text](", final_data$Photo, ")")
final_data <- final_data %>% replace(.=="![alt text](NA)", "-")
return(final_data)
repTable <- function(address1){
base_uri <- "https://www.googleapis.com/civicinfo/v2/"
resource <- "representatives?"
query_params <- list(key = key_api, address = address1)   #"185 E Stevens Way NE, Seattle, WA 98195")
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
offices <- parsed_data$offices
offices <- flatten(offices)
officials <- parsed_data$officials
officials <- flatten(officials)
input <- parsed_data$normalizedInput
state_input <- input$state
officials <- select(officials, name, party, emails, phones, urls, photoUrl)
office <- tidyr::unnest(offices, officialIndices)
colnames(office)[1] <- "office"
data <- mutate(officials, officialIndices = strtoi(row.names(officials)) - 1) %>% left_join(office)
final_data <- select(data, office, name, party, emails, phones, photoUrl)
colnames(final_data)[1] <- "Position"
colnames(final_data)[2] <- "Name"
colnames(final_data)[3] <- "Party"
colnames(final_data)[4] <- "Email"
colnames(final_data)[5] <- "Phone"
colnames(final_data)[6] <- "Photo"
final_data <- final_data %>% replace(.=="NULL", "-")
final_data <- final_data %>% replace(.=="NA", "-")
final_data$Party <- str_replace(final_data$Party, "NA", "-")
final_data$Name <- paste0("[", final_data$Name, "](", data$urls, ")")
final_data <- final_data %>% replace(.=="![Pat McCarthy](NULL)", "Pat McCarthy")
final_data$Email <- str_replace(final_data$Email, "NULL", "-")
final_data$Photo <- paste0("![alt text](", final_data$Photo, ")")
final_data <- final_data %>% replace(.=="![alt text](NA)", "-")
return(final_data)
}
##    There is also console where you can experiment with requests and see what do
##    There is also console where you can experiment with requests and see what do
##    these return.
##    There is also console where you can experiment with requests and see what do
##    these return.
##
##    There is also console where you can experiment with requests and see what do
##    these return.
##
##    Note: you can submit the requests through your browser.  If unsure, or if
##    There is also console where you can experiment with requests and see what do
##    these return.
##
##    Note: you can submit the requests through your browser.  If unsure, or if
##    httr::GET gives you an error, you may always put the address in your browser's
##    There is also console where you can experiment with requests and see what do
##    these return.
##
##    Note: you can submit the requests through your browser.  If unsure, or if
##    httr::GET gives you an error, you may always put the address in your browser's
##    address bar.  If correct, it will display the corresponding JSON data.  If
## 2. extract the elected officials' data from the result
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
## 3. transform the data into a well formatted table
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".  You may format emails as
##    "[john@example.com](mailto:john@example.com)" to make these into a link.
